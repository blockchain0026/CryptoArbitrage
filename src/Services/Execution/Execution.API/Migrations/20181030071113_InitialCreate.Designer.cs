// <auto-generated />
using System;
using CryptoArbitrage.Services.Execution.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoArbitrage.Services.Execution.API.Migrations
{
    [DbContext(typeof(ExecutionContext))]
    [Migration("20181030071113_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:execution.arbitragetransactionsseq", "'arbitragetransactionsseq', 'execution', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:execution.orderseq", "'orderseq', 'execution', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:execution.simplearbitrageseq", "'simplearbitrageseq', 'execution', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:execution.stoplosssettingseq", "'stoplosssettingseq', 'execution', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "arbitragetransactionsseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "execution")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ArbitrageOrderId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("BaseCurrency")
                        .IsRequired();

                    b.Property<decimal>("CommisionPaid");

                    b.Property<int>("ExchangeId");

                    b.Property<int>("OriginalOrderTypeId");

                    b.Property<decimal>("Price");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired();

                    b.Property<int?>("SimpleArbitrageId");

                    b.Property<decimal>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("ArbitrageOrderId");

                    b.HasIndex("OriginalOrderTypeId");

                    b.HasIndex("SimpleArbitrageId");

                    b.ToTable("arbitragetransactions","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "simplearbitrageseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "execution")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("ActualProfits")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("ArbitrageId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("EstimateProfits")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("FailureReason");

                    b.Property<bool>("IsSuccess");

                    b.Property<int>("SimpleArbitrageStatusId");

                    b.HasKey("Id");

                    b.HasIndex("ArbitrageId")
                        .IsUnique();

                    b.HasIndex("SimpleArbitrageStatusId");

                    b.ToTable("simplearbitrages","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrageStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("simplearbitragestatus","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "execution")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ArbitrageId")
                        .IsRequired();

                    b.Property<string>("BaseCurrency")
                        .IsRequired();

                    b.Property<decimal>("CommisionPaid")
                        .HasColumnType("decimal(20,8)");

                    b.Property<int>("ExchangeId");

                    b.Property<string>("ExchangeOrderId");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("OrderStatusId");

                    b.Property<int>("OrderTypeId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("QuantityFilled")
                        .HasColumnType("decimal(20,8)");

                    b.Property<decimal>("QuantityTotal")
                        .HasColumnType("decimal(20,8)");

                    b.Property<string>("QuoteCurrency")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("orders","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("orderstatus","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Orders.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ordertype","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.SlipPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseCurrency");

                    b.Property<string>("QuoteCurrency");

                    b.Property<decimal>("SlipPercents");

                    b.Property<decimal>("SlipQuantity");

                    b.Property<int?>("StopLossSettingId");

                    b.HasKey("Id");

                    b.HasIndex("StopLossSettingId");

                    b.ToTable("SlipPrice");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.StopLossSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "stoplosssettingseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "execution")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.HasKey("Id");

                    b.ToTable("stoplosssettings","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("requests","execution");
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageTransaction", b =>
                {
                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Orders.OrderType", "OriginalOrderType")
                        .WithMany()
                        .HasForeignKey("OriginalOrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage")
                        .WithMany("Transactions")
                        .HasForeignKey("SimpleArbitrageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage", b =>
                {
                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrageStatus", "Status")
                        .WithMany()
                        .HasForeignKey("SimpleArbitrageStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageBuyOrder", "BuyOrder", b1 =>
                        {
                            b1.Property<int?>("SimpleArbitrageId");

                            b1.Property<string>("ArbitrageOrderId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<int>("ExchangeId");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<string>("QuoteCurrency");

                            b1.Property<decimal>("SlipPrice");

                            b1.ToTable("simplearbitrages","execution");

                            b1.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage")
                                .WithOne("BuyOrder")
                                .HasForeignKey("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageBuyOrder", "SimpleArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageData", "ArbitrageData", b1 =>
                        {
                            b1.Property<int?>("SimpleArbitrageId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<decimal>("FinalBaseCurrencyQuantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal>("FinalQuoteCurrencyQuantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal>("OriginalBaseCurrencyQuantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal>("OriginalQuoteCurrencyQuantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<string>("QuoteCurrency");

                            b1.ToTable("simplearbitrages","execution");

                            b1.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage")
                                .WithOne("ArbitrageData")
                                .HasForeignKey("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageData", "SimpleArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageSellOrder", "SellOrder", b1 =>
                        {
                            b1.Property<int?>("SimpleArbitrageId");

                            b1.Property<string>("ArbitrageOrderId");

                            b1.Property<string>("BaseCurrency");

                            b1.Property<int>("ExchangeId");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(20,8)");

                            b1.Property<string>("QuoteCurrency");

                            b1.Property<decimal>("SlipPrice");

                            b1.ToTable("simplearbitrages","execution");

                            b1.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.SimpleArbitrage")
                                .WithOne("SellOrder")
                                .HasForeignKey("CryptoArbitrage.Services.Execution.Domain.Model.Arbitrages.ArbitrageSellOrder", "SimpleArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.Orders.Order", b =>
                {
                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Orders.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.Orders.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.SlipPrice", b =>
                {
                    b.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.StopLossSetting")
                        .WithMany("SlipPrices")
                        .HasForeignKey("StopLossSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.StopLossSetting", b =>
                {
                    b.OwnsOne("CryptoArbitrage.Services.Execution.Domain.Model.Orders.Exchange", "Exchange", b1 =>
                        {
                            b1.Property<int?>("StopLossSettingId");

                            b1.Property<int>("ExchangeId");

                            b1.ToTable("stoplosssettings","execution");

                            b1.HasOne("CryptoArbitrage.Services.Execution.Domain.Model.StopLoss.StopLossSetting")
                                .WithOne("Exchange")
                                .HasForeignKey("CryptoArbitrage.Services.Execution.Domain.Model.Orders.Exchange", "StopLossSettingId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
